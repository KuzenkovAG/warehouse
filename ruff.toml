target-version = "py312"
line-length = 120
extend-exclude = [
    "*alembic/*",
]
src = ["src", "."]

[lint]
select = ["ALL"]
unfixable = [
    "ERA001", # eradicate: found commented out code (can be dangerous if fixed automatically)
]
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in `__init__`
    "D203",   # 1 blank line required before class docstring
    "D400",   # Checks for docstrings in which the first line does not end in a period
    "D415",   # First line should end with a period, question mark, or exclamation point
    "TD003",  # Missing issue link on the line following this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
    "ARG001", # Unused first argument
    "ARG002", # Unused method argument
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving statement into the else clause
    "PT019",  # Fixture without value is injected as parameter, use @pytest.mark.usefixtures instead
              # (usefixtures doesn't play well with IDE features such as auto-renaming)
    "SIM108", # Use ternary operator instead of if-else block (ternaries lie to coverage)
    "RET505", # Unnecessary `else` after `return` statement
    "N805",   # First argument of a method should be named `self` (pydantic validators don't play well with this)
    "PLR0913", # Too many arguments in function definition
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "DTZ005", # datetime.datetime.now()` called without a `tz` argument
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `*args` `**kwargs`
    "ANN204", # Missing return type annotation for special method `__init__`
    "EM101",  # Exception must not use a string literal, assign to variable first
    "FAST002",  # FastAPI dependency without `Annotated`

    "PD901",  # Avoid using the generic variable name `df` for DataFrames

    # The following rules are recommended to be ignored by ruff when using ruff format
    "ISC001", # Checks for implicitly concatenated strings on a single line
    "ISC002", # Checks for implicitly concatenated strings that span multiple lines
    "W191",   # Checks for indentation that uses tabs
    "E111",   # Checks for indentation with a non-multiple of 4 spaces
    "E114",   # Checks for indentation of comments with a non-multiple of 4 spaces
    "E117",   # Checks for over-indented code
    "D206",   # Checks for docstrings that are indented with tabs
    "D300",   # Checks for docstrings that use '''single quotes''' instead of """double quotes"""
    "Q000",   # Checks for inline strings that use single quotes or double quotes
    "Q001",   # Checks for multiline strings that use single quotes or double quotes
    "Q002",   # Checks for docstrings that use single quotes or double quotes
    "Q003",   # Checks for strings that include escaped quotes
    "COM812", # Checks for the absence of trailing commas
    "COM819", # Checks for the presence of prohibited trailing commas
    "RET506", # Unnecessary `elif` after `raise` statement
    "RUF002", # Docstring contains ambiguous `с`
    "RUF001", # String contains ambiguous `о`
    "RUF003", # Comment contains ambiguous `с`, `К`, `у`
    "B008",   # for ignore Depends in function args
    "D212",   # multi-line-summary-first-line
]


[lint.per-file-ignores]
"*tests/*" = [
    "S",        # ignore bandit security issues in tests
    "B018",     # ignore useless expressions in tests
    "PT012",    # ignore complex with pytest.raises clauses
    "RUF012",   # ignore mutable class attributes ClassVar typehint requirement
    "ANN001",   # Missing type annotation for function argument
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs
    "PGH003",   # Use specific rule codes when ignoring type issues
    "B008",     # Do not perform function call in argument defaults
    "ANN201",   # Missing return type annotation for public function
    "ANN202",   # Missing return type annotation for private function
    "SLF001",   # Private member accessed
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "PD011",    # Use `.to_numpy()` instead of `.values`
    "PLR0915",  # Too many statements
    "PLR0912",  # Too many branches
]

[lint.mccabe]
max-complexity = 14

[format]
quote-style = "double"
indent-style = "space"